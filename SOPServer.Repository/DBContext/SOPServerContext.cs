// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using SOPServer.Repository.Entities;
using System;
using System.Collections.Generic;
using System.Text.Json;

namespace SOPServer.Repository.DBContext;

public partial class SOPServerContext : DbContext
{
    public SOPServerContext()
    {
    }

    public SOPServerContext(DbContextOptions<SOPServerContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Item> Items { get; set; }

    public virtual DbSet<ItemOccasion> ItemOccasions { get; set; }

    public virtual DbSet<ItemSeason> ItemSeasons { get; set; }

    public virtual DbSet<ItemStyle> ItemStyles { get; set; }

    public virtual DbSet<Job> Jobs { get; set; }

    public virtual DbSet<Occasion> Occasions { get; set; }

    public virtual DbSet<Season> Seasons { get; set; }

    public virtual DbSet<Style> Styles { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserStyle> UserStyles { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<PostImage> PostImages { get; set; }

    public virtual DbSet<Hashtag> Hashtags { get; set; }

    public virtual DbSet<PostHashtags> PostHashtags { get; set; }

    public virtual DbSet<OutfitItems> OutfitItems { get; set; }

    public virtual DbSet<Outfit> Outfits { get; set; }

    public virtual DbSet<OutfitUsageHistory> OutfitUsageHistories { get; set; }

    public virtual DbSet<UserOccasion> UserOccasions { get; set; }

    public virtual DbSet<AISetting> AISettings { get; set; }

    public virtual DbSet<LikePost> LikePosts { get; set; }

    public virtual DbSet<CommentPost> CommentPosts { get; set; }

    public virtual DbSet<Follower> Followers { get; set; }

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=SOPServer;User ID=sa;Password=sa123456");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Category__3214EC071F17A97B");

            entity.ToTable("Category");

            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(true);

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("FK_Category_Parent");
        });

        modelBuilder.Entity<Item>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Item__3214EC0747906DDA");

            entity.ToTable("Item");

            entity.Property(e => e.AiDescription)
                .IsUnicode(true);
            entity.Property(e => e.Brand)
                .HasMaxLength(255)
                .IsUnicode(true);
            entity.Property(e => e.Color)
                .IsUnicode(true);
            entity.Property(e => e.Condition)
                .IsUnicode(true);
            entity.Property(e => e.Fabric)
                .HasMaxLength(255)
                .IsUnicode(true);
            entity.Property(e => e.FrequencyWorn)
                .HasMaxLength(255)
                .IsUnicode(true);
            entity.Property(e => e.ImgUrl)
                .HasMaxLength(255)
                .IsUnicode(true);
            entity.Property(e => e.LastWornAt)
                .HasColumnType("datetime2");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(true);
            entity.Property(e => e.Pattern)
                .HasMaxLength(255)
                .IsUnicode(true);
            entity.Property(e => e.WeatherSuitable)
                .HasMaxLength(255)
                .IsUnicode(true);

            entity.HasOne(d => d.User).WithMany(p => p.Items)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Item_User");

            entity.HasOne(d => d.Category).WithMany(p => p.Items)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK_Item_Category");
        });

        modelBuilder.Entity<ItemOccasion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ItemOcca__3214EC0770686AD7");

            entity.ToTable("ItemOccasion");

            entity.HasOne(d => d.Item).WithMany(p => p.ItemOccasions)
                .HasForeignKey(d => d.ItemId)
                .HasConstraintName("FK_ItemOccasion_Item");

            entity.HasOne(d => d.Occasion).WithMany(p => p.ItemOccasions)
                .HasForeignKey(d => d.OccasionId)
                .HasConstraintName("FK_ItemOccasion_Occasion");
        });

        modelBuilder.Entity<ItemSeason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ItemSeas__3214EC07D4095C08");

            entity.ToTable("ItemSeason");

            entity.HasOne(d => d.Item).WithMany(p => p.ItemSeasons)
                .HasForeignKey(d => d.ItemId)
                .HasConstraintName("FK_ItemSeason_Item");

            entity.HasOne(d => d.Season).WithMany(p => p.ItemSeasons)
                .HasForeignKey(d => d.SeasonId)
                .HasConstraintName("FK_ItemSeason_Season");
        });

        modelBuilder.Entity<ItemStyle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ItemStyl__3214EC07C65FA98C");

            entity.ToTable("ItemStyle");

            entity.HasOne(d => d.Item).WithMany(p => p.ItemStyles)
                .HasForeignKey(d => d.ItemId)
                .HasConstraintName("FK_ItemStyle_Item");

            entity.HasOne(d => d.Style).WithMany(p => p.ItemStyles)
                .HasForeignKey(d => d.StyleId)
                .HasConstraintName("FK_ItemStyle_Style");
        });

        modelBuilder.Entity<Job>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Job__3214EC07BB559D15");

            entity.ToTable("Job");

            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .IsUnicode(true);
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(true);
        });

        modelBuilder.Entity<Occasion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Occasion__3214EC07770E08E7");

            entity.ToTable("Occasion");

            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(true);
        });

        modelBuilder.Entity<Season>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Season__3214EC07455A7347");

            entity.ToTable("Season");

            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(true);
        });

        modelBuilder.Entity<Style>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Style__3214EC074BD205BF");

            entity.ToTable("Style");

            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .IsUnicode(true);
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(true);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__User__3214EC0767F70699");

            entity.ToTable("User");

            entity.HasIndex(e => e.Email, "UQ__User__A9D105340DE61212").IsUnique();

            entity.Property(e => e.PreferedColor)
                  .HasConversion(
                    v => JsonSerializer.Serialize(v, (JsonSerializerOptions)null),
                    v => JsonSerializer.Deserialize<List<string>>(v, (JsonSerializerOptions)null))
                  .HasColumnType("nvarchar(max)");

            entity.Property(e => e.AvoidedColor)
                .HasConversion(
                    v => JsonSerializer.Serialize(v, (JsonSerializerOptions)null),
                    v => JsonSerializer.Deserialize<List<string>>(v, (JsonSerializerOptions)null))
                .HasColumnType("nvarchar(max)");

            entity.Property(e => e.AvtUrl)
                .HasMaxLength(255)
                .IsUnicode(true);
            entity.Property(e => e.Bio)
                .HasMaxLength(255)
                .IsUnicode(true);
            entity.Property(e => e.DisplayName)
                .HasMaxLength(100)
                .IsUnicode(true);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(true);
            entity.Property(e => e.IsPremium).HasDefaultValue(false);
            entity.Property(e => e.IsStylist).HasDefaultValue(false);
            entity.Property(e => e.IsVerifiedEmail).HasDefaultValue(false);
            entity.Property(e => e.IsLoginWithGoogle).HasDefaultValue(false);
            entity.Property(e => e.IsFirstTime).HasDefaultValue(false);
            entity.Property(e => e.Location)
                .HasMaxLength(255)
                .IsUnicode(true);
            entity.Property(e => e.PasswordHash)
                .HasMaxLength(255)
                .IsUnicode(true);
            entity.Property(e => e.Role)
                .HasConversion<int>();
            entity.Property(e => e.Gender)
                .HasConversion<int>();
            entity.Property(e => e.Dob)
                .HasColumnType("date");

            entity.HasOne(d => d.Job).WithMany(p => p.Users)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_User_Job");
        });

        modelBuilder.Entity<UserStyle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UserStyl__3214EC07CE37713F");

            entity.ToTable("UserStyle");

            entity.HasOne(d => d.Style).WithMany(p => p.UserStyles)
                .HasForeignKey(d => d.StyleId)
                .HasConstraintName("FK_UserStyle_Style");

            entity.HasOne(d => d.User).WithMany(p => p.UserStyles)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserStyle_User");
        });

        modelBuilder.Entity<Post>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Post__3214EC07");

            entity.ToTable("Post");

            entity.Property(e => e.Body)
                .IsUnicode(true);

            entity.HasOne(d => d.User).WithMany(p => p.Posts)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Post_User");
        });

        modelBuilder.Entity<PostImage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PostImag__3214EC07");

            entity.ToTable("PostImage");

            entity.Property(e => e.ImgUrl)
                .HasMaxLength(255)
                .IsUnicode(true);

            entity.HasOne(d => d.Post).WithMany(p => p.PostImages)
                .HasForeignKey(d => d.PostId)
                .HasConstraintName("FK_PostImage_Post");
        });

        modelBuilder.Entity<Hashtag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Hashtag__3214EC07");

            entity.ToTable("Hashtag");

            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(true);
        });

        modelBuilder.Entity<PostHashtags>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PostHash__3214EC07");

            entity.ToTable("PostHashtags");

            entity.HasOne(d => d.Post).WithMany(p => p.PostHashtags)
                .HasForeignKey(d => d.PostId)
                .HasConstraintName("FK_PostHashtags_Post");

            entity.HasOne(d => d.Hashtag).WithMany(p => p.PostHashtags)
                .HasForeignKey(d => d.HashtagId)
                .HasConstraintName("FK_PostHashtags_Hashtag");
        });

        modelBuilder.Entity<Outfit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Outfit__3214EC07");

            entity.ToTable("Outfit");

            entity.Property(e => e.IsFavorite)
                .HasDefaultValue(false);

            entity.Property(e => e.IsSaved)
                .HasDefaultValue(false);

            entity.Property(e => e.CreatedBy)
                .HasConversion<int>();

            entity.HasOne(d => d.User).WithMany(p => p.Outfits)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Outfit_User");
        });

        modelBuilder.Entity<OutfitItems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__OutfitIt__3214EC07");

            entity.ToTable("OutfitItems");

            entity.HasOne(d => d.Outfit).WithMany(p => p.OutfitItems)
                .HasForeignKey(d => d.OutfitId)
                .HasConstraintName("FK_OutfitItems_Outfit");

            entity.HasOne(d => d.Item).WithMany(p => p.OutfitItems)
                .HasForeignKey(d => d.ItemId)
                .HasConstraintName("FK_OutfitItems_Item");
        });

        modelBuilder.Entity<OutfitUsageHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__OutfitUs__3214EC07");

            entity.ToTable("OutfitUsageHistory");

            entity.Property(e => e.DateUsed)
                .HasColumnType("datetime2");

            entity.Property(e => e.CreatedBy)
                .HasConversion<int>();

            entity.HasOne(d => d.User).WithMany(p => p.OutfitUsageHistories)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_OutfitUsageHistory_User")
                .OnDelete(DeleteBehavior.NoAction);

            entity.HasOne(d => d.Outfit).WithMany(p => p.OutfitUsageHistories)
                .HasForeignKey(d => d.OutfitId)
                .HasConstraintName("FK_OutfitUsageHistory_Outfit")
                .OnDelete(DeleteBehavior.NoAction);

            entity.HasOne(d => d.UserOccasion).WithMany(p => p.OutfitUsageHistories)
                .HasForeignKey(d => d.UserOccassionId)
                .HasConstraintName("FK_OutfitUsageHistory_UserOccasion")
                .OnDelete(DeleteBehavior.SetNull);
        });

        modelBuilder.Entity<UserOccasion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UserOcca__3214EC07");

            entity.ToTable("UserOccasion");

            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(true);

            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(true);

            entity.Property(e => e.DateOccasion)
                .HasColumnType("datetime2");

            entity.Property(e => e.StartTime)
                .HasColumnType("datetime2");

            entity.Property(e => e.EndTime)
                .HasColumnType("datetime2");

            entity.Property(e => e.WeatherSnapshot)
                .HasConversion<int>();

            entity.HasOne(d => d.User).WithMany(p => p.UserOccasions)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserOccasion_User")
                .OnDelete(DeleteBehavior.NoAction);

            entity.HasOne(d => d.Occasion).WithMany(p => p.UserOccasions)
                .HasForeignKey(d => d.OccasionId)
                .HasConstraintName("FK_UserOccasion_Occasion")
                .OnDelete(DeleteBehavior.SetNull);
        });

        modelBuilder.Entity<AISetting>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.ToTable("AISettings");

            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(true);

            entity.Property(e => e.Value)
                .HasMaxLength(int.MaxValue)
                .IsUnicode(true);

            entity.Property(e => e.Type)
                .HasConversion<int>();
        });

        modelBuilder.Entity<LikePost>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LikePost__3214EC07");

            entity.ToTable("LikePost");

            entity.HasOne(d => d.Post).WithMany(p => p.LikePosts)
                .HasForeignKey(d => d.PostId)
                .HasConstraintName("FK_LikePost_Post")
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.User).WithMany(p => p.LikePosts)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_LikePost_User")
                .OnDelete(DeleteBehavior.NoAction);

            entity.HasIndex(e => new { e.PostId, e.UserId })
                .IsUnique()
                .HasDatabaseName("IX_LikePost_PostId_UserId");
        });

        modelBuilder.Entity<CommentPost>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CommentPost__3214EC07");

            entity.ToTable("CommentPost");

            entity.Property(e => e.Comment)
                .IsUnicode(true);

            entity.HasOne(d => d.Post).WithMany(p => p.CommentPosts)
                .HasForeignKey(d => d.PostId)
                .HasConstraintName("FK_CommentPost_Post")
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.User).WithMany(p => p.CommentPosts)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_CommentPost_User")
                .OnDelete(DeleteBehavior.NoAction);

            entity.HasOne(d => d.ParentComment).WithMany(p => p.Replies)
                .HasForeignKey(d => d.ParentCommentId)
                .HasConstraintName("FK_CommentPost_ParentComment")
                .OnDelete(DeleteBehavior.NoAction);
        });

        modelBuilder.Entity<Follower>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Follower__3214EC07");

            entity.ToTable("Follower");

            entity.HasOne(d => d.FollowerUser).WithMany(p => p.Followers)
                .HasForeignKey(d => d.FollowerId)
                .HasConstraintName("FK_Follower_FollowerUser")
                .OnDelete(DeleteBehavior.NoAction);

            entity.HasOne(d => d.FollowingUser).WithMany(p => p.Following)
                .HasForeignKey(d => d.FollowingId)
                .HasConstraintName("FK_Follower_FollowingUser")
                .OnDelete(DeleteBehavior.NoAction);

            entity.HasIndex(e => new { e.FollowerId, e.FollowingId })
                .IsUnique()
                .HasDatabaseName("IX_Follower_FollowerId_FollowingId");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}